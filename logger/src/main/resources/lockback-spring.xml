<?xml version="1.0" encoding="UTF-8"?>
<!--
根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：
Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
Log4j2：log4j2-spring.xml, log4j2.xml
JDK (Java Util Logging)：logging.properties
Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），
命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项
-->
<!-- configuration根节点
    属性说明：
        scan：配置文件改变时是否重新加载 true表示是
        scanPeriod： 监视配置文件是否有修改的间隔时间，默认毫秒，scan为true时才生效
        debug: 是否打印logback内部日志信息 ，true表示是

     总体说明：根节点下有2个属性，三个节点
        属性： contextName 上下文名称； property 设置变量
        节点： appender,  root， logger
      详细说明见具体位置
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
            </pattern>
        </encoder>
    </appender>

    <contextName>train</contextName>
    <property name="logback.path" value="F:\\workspaceScala\\log"/>
    <!-- 日志记录器，日期滚动记录 -->
    <appender name="fileInfoApp" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <!-- <file>${LOG_PATH}/warn/log_warn.log</file> -->
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，
            可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <!--<fileNamePattern>log/log-info-%d{yyyy-MM-dd_HH-mm}.%i.log</fileNamePattern>-->
            <fileNamePattern>log/log-info-%d{yyyy-MM-dd_HH-mm}.log</fileNamePattern>
            <!-- 表示只保留最近30天的日志，以防止日志填满整个磁盘空间。-->
            <maxHistory>30</maxHistory>
            <!--用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。-->
            <totalSizeCap>10GB</totalSizeCap>
            <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，命名日志文件，例如log-error-2013-12-21.0.log -->
            <!--<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>2MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>-->
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!-- 此日志文件只记录war级别的 -->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">
            &lt;!&ndash; 只保留error日志 &ndash;&gt;
            &lt;!&ndash; level:debug,info,warn,error &ndash;&gt;
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>-->
    </appender>

    <!--
        root指定最基础的日志输出级别，level属性指定
        appender-ref标识的appender将会添加到这个logger
    -->
    <!--<root level="info">
        <appender-ref ref="STDOUT" />
    </root>-->
    <!--
        logger用来设置某一个具体的包或者类的日志打印， name表明包路径或类路径，level指定打印级别，
        addtivity表示是否向上级logger(即，root)传递打印信息
        下例指定了debug及以上级别的日志交给“console”appender打印，并且不向上传递。
    -->
    <logger name="com.custom.logger.AppLogger" level="debug" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="fileInfoApp" />
    </logger>
</configuration>